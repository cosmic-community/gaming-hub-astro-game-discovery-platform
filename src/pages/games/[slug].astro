---
import Layout from '../../layouts/Layout.astro'
import Header from '../../components/Header.astro'
import Footer from '../../components/Footer.astro'
import GameCard from '../../components/GameCard.astro'
import CosmicBadge from '../../components/CosmicBadge.astro'
import { getGameBySlug, getGamesByGenre, getAllGames } from '../../lib/cosmic'
import type { Game, Genre, Developer } from '../../../types'

export interface Props {
  slug: string
}

// Get the slug from params
const { slug } = Astro.params

if (!slug) {
  return Astro.redirect('/404')
}

// Fetch the game data
const game = await getGameBySlug(slug)

if (!game || !game.metadata) {
  return Astro.redirect('/404')
}

// Extract game data with proper null checks
const gameTitle = game.metadata.game_title || game.title || 'Unknown Game'
const description = game.metadata.description || ''
const screenshots = game.metadata.screenshots || []
const platforms = game.metadata.platform || []
const rating = game.metadata.rating
const releaseDate = game.metadata.release_date
const genre = game.metadata.genre as Genre | undefined
const developer = game.metadata.developer as Developer | undefined

// Fetch related games from the same genre
let relatedGames: Game[] = []
if (genre) {
  try {
    const genreGames = await getGamesByGenre(genre.id)
    relatedGames = genreGames.filter(g => g.id !== game.id).slice(0, 3)
  } catch (error) {
    console.error('Error fetching related games:', error)
  }
}

// Helper functions
const cleanHTML = (html: string): string => {
  return html.replace(/<script[^>]*>.*?<\/script>/gi, '')
}

const formatDate = (dateString: string): string => {
  try {
    const date = new Date(dateString)
    return date.toLocaleDateString('en-US', { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    })
  } catch {
    return dateString
  }
}

const bucketSlug = import.meta.env.COSMIC_BUCKET_SLUG
---

<Layout title={`${gameTitle} - Gaming Hub`} description={cleanHTML(description).substring(0, 160)}>
  <Header />
  
  <main>
    <!-- Game Header -->
    <section class="py-16 bg-gradient-to-r from-gaming-darker to-gaming-dark">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-12 items-start">
          <!-- Featured Image -->
          <div class="order-2 lg:order-1">
            {game.metadata.featured_image ? (
              <img 
                src={`${game.metadata.featured_image.imgix_url}?w=600&h=400&fit=crop&auto=format,compress`}
                alt={`${gameTitle} featured image`}
                class="w-full rounded-lg shadow-2xl"
                width="600"
                height="400"
              />
            ) : (
              <div class="w-full h-96 bg-gradient-to-br from-primary-500 to-gaming-accent rounded-lg flex items-center justify-center">
                <div class="text-center text-white">
                  <svg class="w-16 h-16 mx-auto mb-4" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd" />
                  </svg>
                  <p class="text-lg font-medium">{gameTitle}</p>
                </div>
              </div>
            )}
          </div>
          
          <!-- Game Info -->
          <div class="order-1 lg:order-2">
            <h1 class="text-4xl md:text-5xl font-bold text-white mb-4">
              {gameTitle}
            </h1>
            
            <!-- Platforms -->
            {platforms.length > 0 && (
              <div class="flex flex-wrap gap-2 mb-6">
                {platforms.map((platform: string) => (
                  <span class="bg-gaming-accent/20 text-gaming-accent px-3 py-1 rounded-full text-sm font-medium">
                    {platform}
                  </span>
                ))}
              </div>
            )}
            
            <!-- Game Description -->
            {description && (
              <div class="prose prose-invert max-w-none mb-8">
                <div 
                  class="text-gray-300 leading-relaxed"
                  set:html={cleanHTML(description)}
                />
              </div>
            )}
            
            <!-- Screenshots Gallery -->
            {screenshots.length > 0 && (
              <div class="mb-8">
                <h3 class="text-xl font-bold text-white mb-4">Screenshots</h3>
                <div class="grid grid-cols-2 gap-4">
                  {screenshots.map((screenshot: any, index: number) => (
                    <img 
                      src={`${screenshot.imgix_url}?w=300&h=200&fit=crop&auto=format,compress`}
                      alt={`${gameTitle} screenshot ${index + 1}`}
                      class="rounded-lg shadow-md hover:shadow-lg transition-shadow cursor-pointer"
                      width="300"
                      height="200"
                    />
                  ))}
                </div>
              </div>
            )}
            
            <!-- Game Details -->
            <div class="grid grid-cols-2 gap-6 p-6 bg-gaming-dark rounded-lg">
              <!-- Genre -->
              {genre && (
                <div>
                  <h4 class="text-gray-400 text-sm font-medium mb-2">Genre</h4>
                  <a 
                    href={`/genres/${genre.slug}`}
                    class="text-primary-400 hover:text-primary-300 font-medium transition-colors"
                  >
                    {genre.metadata?.genre_name || genre.title}
                  </a>
                </div>
              )}
              
              <!-- Developer -->
              {developer && (
                <div>
                  <h4 class="text-gray-400 text-sm font-medium mb-2">Developer</h4>
                  <a 
                    href={`/developers/${developer.slug}`}
                    class="text-primary-400 hover:text-primary-300 font-medium transition-colors"
                  >
                    {developer.metadata?.studio_name || developer.title}
                  </a>
                </div>
              )}
              
              <!-- Release Date -->
              {releaseDate && (
                <div>
                  <h4 class="text-gray-400 text-sm font-medium mb-2">Release Date</h4>
                  <span class="text-white">{formatDate(releaseDate)}</span>
                </div>
              )}
              
              <!-- Rating -->
              {rating && (
                <div>
                  <h4 class="text-gray-400 text-sm font-medium mb-2">Rating</h4>
                  <span class="text-white">{rating.value}</span>
                </div>
              )}
              
              <!-- Platforms (detailed) -->
              {platforms.length > 0 && (
                <div class="col-span-2">
                  <h4 class="text-gray-400 text-sm font-medium mb-2">Available On</h4>
                  <div class="flex flex-wrap gap-2">
                    {platforms.map((platform: string) => (
                      <span class="bg-gray-700 text-gray-300 px-3 py-1 rounded text-sm">
                        {platform}
                      </span>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Related Games -->
    {relatedGames.length > 0 && (
      <section class="py-16 bg-gaming-dark">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <h2 class="text-3xl font-bold text-white mb-8">
            More {genre?.metadata?.genre_name || genre?.title || 'Similar'} Games
          </h2>
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {relatedGames.map((relatedGame: Game) => (
              <GameCard game={relatedGame} />
            ))}
          </div>
          <div class="text-center mt-12">
            <a 
              href={genre ? `/genres/${genre.slug}` : '/games'}
              class="inline-flex items-center bg-primary-500 hover:bg-primary-600 text-white px-6 py-3 rounded-lg font-medium transition-colors"
            >
              View All {genre?.metadata?.genre_name || 'Games'}
              <svg class="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
              </svg>
            </a>
          </div>
        </div>
      </section>
    )}
  </main>
  
  <Footer />
  <CosmicBadge bucketSlug={bucketSlug} />
</Layout>